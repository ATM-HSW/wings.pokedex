<?xml version="1.0" encoding="UTF-8"?>
<!-- JBoss, Home of Professional Open Source Copyright 2015, Red Hat, Inc. 
	and/or its affiliates, and individual contributors by the @authors tag. See 
	the copyright.txt in the distribution for a full listing of individual contributors. 
	Licensed under the Apache License, Version 2.0 (the "License"); you may not 
	use this file except in compliance with the License. You may obtain a copy 
	of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>de.kubbillum.wings.pokedex</groupId>
		<artifactId>pokedex</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>
	<artifactId>pokedex-web</artifactId>
	<packaging>war</packaging>
	<name>pokedex - web</name>
	<description>This is the web POM file</description>

	<dependencies>

		<!-- Import the CDI API, we use provided scope as the API is included in 
			WildFly / JBoss EAP -->
		<dependency>
			<groupId>jakarta.enterprise</groupId>
			<artifactId>jakarta.enterprise.cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Bean Validation Implementation Provides portable constraints such 
			as @Email Hibernate Validator is shipped in WildFly / JBoss EAP -->
		<dependency>
			<groupId>org.hibernate.validator</groupId>
			<artifactId>hibernate-validator</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JPA API, we use provided scope as the API is included in 
			WildFly / JBoss EAP -->
		<dependency>
			<groupId>jakarta.persistence</groupId>
			<artifactId>jakarta.persistence-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Dependency on the EJB module so we can use it's services if needed -->
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>pokedex-ejb</artifactId>
			<type>ejb</type>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JSF API, we use provided scope as the API is included in 
			WildFly / JBoss EAP -->
		<dependency>
			<groupId>org.jboss.spec.javax.faces</groupId>
			<artifactId>jboss-jsf-api_2.3_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JAX-RS API, we use provided scope as the API is included 
			in WildFly / JBoss EAP -->
		<dependency>
			<groupId>org.jboss.spec.javax.ws.rs</groupId>
			<artifactId>jboss-jaxrs-api_2.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Servlet API -->
		<dependency>
			<groupId>org.jboss.spec.javax.servlet</groupId>
			<artifactId>jboss-servlet-api_4.0_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the EJB API, we use provided scope as the API is included in 
			WildFly / JBoss EAP -->
		<dependency>
			<groupId>org.jboss.spec.javax.ejb</groupId>
			<artifactId>jboss-ejb-api_3.2_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Test scope dependencies -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Optional, but highly recommended -->
		<!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA) 
			JPA from JUnit/TestNG -->
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.arquillian.protocol</groupId>
			<artifactId>arquillian-protocol-servlet</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery</artifactId>
			<version>3.5.1</version>
		</dependency>

		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>3.3.2</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>font-awesome</artifactId>
			<version>5.15.2</version>
		</dependency>
		<!-- <dependency> <groupId>org.webjars</groupId> <artifactId>angularjs</artifactId> 
			<version>1.3.10</version> </dependency> -->

	</dependencies>

	<build>
		<!-- Tell Maven that the resulting file should not have a file name containing 
			the version - a non versioned name is required e.g. when building a deployable 
			artifact using the ShrinkWrap API -->
		<finalName>${project.artifactId}</finalName>

		<plugins>
			<!-- <plugin> <artifactId>maven-resources-plugin </artifactId> <executions> 
				<execution> <id>copy-angular2-dir</id> <phase>validate</phase> <goals> <goal>copy-resources</goal> 
				</goals> <configuration> <outputDirectory>${basedir}/target/angular2</outputDirectory> 
				<resources> <resource> <directory>src/main/frontend</directory> <includes> 
				<include>pokedex-web/**/*.*</include> </includes> </resource> </resources> 
				</configuration> </execution> </executions> </plugin> -->

			<!--Build configuration for the WAR plugin: -->
			<!-- <plugin> <groupId>com.github.eirslett</groupId> <artifactId>frontend-maven-plugin</artifactId> 
				<version>1.11.0</version> <configuration> <workingDirectory>src/main/frontend</workingDirectory> 
				</configuration> <executions> <execution> <id>install-node-and-npm</id> <goals> 
				<goal>install-node-and-npm</goal> </goals> <configuration> <nodeVersion>v10.16.1</nodeVersion> 
				<nodeVersion>v14.15.4</nodeVersion> </configuration> </execution> <execution> 
				<id>npm install</id> <goals> <goal>npm</goal> </goals> <configuration> <arguments>install</arguments> 
				</configuration> </execution> <execution> <id>npm build</id> <goals> <goal>npm</goal> 
				</goals> <configuration> <arguments>run buildProduction</arguments> </configuration> 
				<phase>generate-resources</phase> </execution> </executions> </plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>${version.war.plugin}</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
			-->
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>${version.war.plugin}</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
					 <webResources>
						<resource>
							<directory>${basedir}/target/ngfrontend/dist/ngfrontend</directory>
							<includes>
								<include>**/*.*</include>
							</includes>
						</resource>
					</webResources> 
				</configuration>
			</plugin>
			
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<version>3.0.0</version>
				<configuration>
					<failOnError>false</failOnError>
					<filesets>
						<fileset>
							<directory>src/ngfrontend/dist</directory>
							<followSymlinks>false</followSymlinks>
						</fileset>
						<fileset>
							<directory>src/ngfrontend/node_modules</directory>
							<followSymlinks>false</followSymlinks>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.0.2</version>
				<executions>
					<execution>
						<id>copy-ngfrontend-dir</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target</outputDirectory>
							<resources>
								<resource>
									<directory>src</directory>
									<includes>
										<include>ngfrontend/**/*.*</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>exec-maven-plugin</artifactId>
				<groupId>org.codehaus.mojo</groupId>
				<version>1.4.0</version>
				<executions>
					<execution>
						<id>npm install</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>generate-sources</phase>
						<configuration>
							<executable>npm</executable>
							<arguments>
								<argument>install</argument>
							</arguments>
							<workingDirectory>${basedir}/target/ngfrontend</workingDirectory>
							<target>
								<echo message="Npm install" />
							</target>
						</configuration>
					</execution>
					<execution>
						<id>angular-cli build</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>generate-resources</phase>
						<configuration>
							<executable>npm</executable>
							<arguments>
								<argument>run</argument>
								<argument>build</argument>
							</arguments>
							<workingDirectory>${basedir}/target/ngfrontend</workingDirectory>
						</configuration>
					</execution>
					<!-- <execution>
						<id>angular-cli test</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>test</phase>
						<configuration>
							<executable>npm</executable>
							<arguments>
								<argument>run</argument>
								<argument>test</argument>
								<argument>test-chromium</argument>
							</arguments>
							<workingDirectory>${basedir}/target/ngfrontend</workingDirectory>
						</configuration>
					</execution> -->
				</executions>
			</plugin>


			<!-- <plugin> <artifactId>maven-resources-plugin</artifactId> <version>3.0.2</version> 
				<executions> <execution> <id>copy-angular-dir</id> <phase>validate</phase> 
				<goals> <goal>copy-resources</goal> </goals> <configuration> <outputDirectory>${basedir}/target/frontend</outputDirectory> 
				<resources> <resource> <directory>src/frontend</directory> <includes> <include>*</include> 
				</includes> </resource> </resources> </configuration> </execution> </executions> 
				</plugin> -->
		</plugins>

		<pluginManagement>
			<plugins>
				<plugin>
					<artifactId>lifecycle-mapping</artifactId>
					<groupId>org.eclipse.m2e</groupId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<artifactId>exec-maven-plugin</artifactId>
										<groupId>org.codehaus.mojo</groupId>
										<versionRange>[1.4.0,)</versionRange>
										<goals>
											<goal>exec</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<artifactId>maven-resources-plugin</artifactId>
										<groupId>org.apache.maven.plugins</groupId>
										<versionRange>[3.0.0,)</versionRange>
										<goals>
											<goal>copy-resources</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>
